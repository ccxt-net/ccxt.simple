param(
    [string]$Root = "src/exchanges",
    [string]$Output = "docs/EXCHANGE_STATUS.generated.md",
    [switch]$Print
)

# Detect root if not exists
if (-not (Test-Path $Root)) {
    $candidate = Join-Path (Split-Path $PSScriptRoot -Parent) 'src/exchanges'
    if (Test-Path $candidate) { $Root = $candidate }
}
if (-not (Test-Path $Root)) { Write-Error "Root path not found: $Root"; exit 1 }

$files = Get-ChildItem -Path $Root -Recurse -Filter 'X*.cs'
if (-not $files) { Write-Warning 'No exchange files found.'; exit 0 }

$metaList = @()
foreach ($file in $files) {
    $lines = Get-Content -Path $file.FullName -TotalCount 60
    $begin = $lines.IndexOf('// == CCXT-SIMPLE-META-BEGIN ==')
    $end = $lines.IndexOf('// == CCXT-SIMPLE-META-END ==')
    if ($begin -ge 0 -and $end -gt $begin) {
        $block = $lines[$begin..$end]
        $meta = [ordered]@{ File = $file.Name }
        foreach ($l in $block) {
            if ($l -match '^// ([A-Z_]+):\s*(.*)$') {
                $meta[$matches[1]] = $matches[2]
            }
        }
        # Derive counts
        $impl = ($meta['STANDARD_METHODS_IMPLEMENTED'] -split ',' | Where-Object { $_ -ne '' }).Count
    $pending = ($meta['STANDARD_METHODS_PENDING'] -split ',' | Where-Object { $_ -ne '' }).Count
    $stub = 0
    if ($meta.Contains('STANDARD_METHODS_STUB')) { $stub = ($meta['STANDARD_METHODS_STUB'] -split ',' | Where-Object { $_ -ne '' }).Count }
        $meta['IMPL_COUNT'] = $impl
        $meta['PENDING_COUNT'] = $pending
    $meta['STUB_COUNT'] = $stub
        $meta['EXCHANGE_UPPER'] = ($meta['EXCHANGE'] ?? '').ToUpper()
        $metaList += [pscustomobject]$meta
    }
}

if (-not $metaList) { Write-Warning 'No meta blocks found.'; exit 0 }

# Status order
$statusOrder = @{ 'FULL' = 0; 'PARTIAL' = 1; 'SKELETON' = 2; 'LEGACY_ONLY' = 3; 'DEPRECATED' = 4 }
$sorted = $metaList | Sort-Object @{Expression={ $statusOrder[[string]$_.IMPLEMENTATION_STATUS] }; Ascending=$true}, EXCHANGE

# Distribution (robust counting)
$total = $metaList.Count
$statusCounts = @{}
foreach ($m in $metaList) {
    $s = ($m.IMPLEMENTATION_STATUS | ForEach-Object { $_.Trim() })
    if (-not $s) { $s = 'UNKNOWN' }
    if ($statusCounts.ContainsKey($s)) { $statusCounts[$s]++ } else { $statusCounts[$s] = 1 }
}
$orderedStatuses = $statusOrder.Keys | Where-Object { $statusCounts.ContainsKey($_) } | ForEach-Object { $_ }
if ($statusCounts.ContainsKey('UNKNOWN')) { $orderedStatuses += 'UNKNOWN' }

$sb = New-Object System.Text.StringBuilder
$null = $sb.AppendLine('# Exchange Implementation Status (Generated)')
$null = $sb.AppendLine()
$null = $sb.AppendLine('> DO NOT EDIT MANUALLY. Generated by scripts/generate-meta-summary.ps1')
$null = $sb.AppendLine()
$null = $sb.AppendLine('## Summary')
foreach ($name in $orderedStatuses) {
    $count = $statusCounts[$name]
    $pct = [math]::Round(($count / $total) * 100, 1)
    $null = $sb.AppendLine(('- {0}: {1} ({2}%)' -f $name, $count, $pct))
}
$null = $sb.AppendLine("- Total: $total")
$null = $sb.AppendLine()
$null = $sb.AppendLine('## Table')
$null = $sb.AppendLine('| Exchange | Status | Impl | Pending | Stub | Legacy | NotImplEx | LastReviewed | Reviewer | Notes |')
$null = $sb.AppendLine('|----------|--------|------|---------|------|--------|-----------|--------------|----------|-------|')
foreach ($m in $sorted) {
    $legacyCell = ($m.LEGACY_METHODS_IMPLEMENTED -replace ',', '<br/>')
    $notesCell = ($m.NOTES -replace '\|','/')
    $line = ('| {0} | {1} | {2} | {3} | {9} | {4} | {5} | {6} | {7} | {8} |' -f 
        $m.EXCHANGE, 
        $m.IMPLEMENTATION_STATUS, 
        $m.IMPL_COUNT, 
        $m.PENDING_COUNT, 
        $legacyCell, 
        $m.NOT_IMPLEMENTED_EXCEPTIONS, 
        $m.LAST_REVIEWED, 
        $m.REVIEWER, 
        $notesCell,
        $m.STUB_COUNT)
    $null = $sb.AppendLine($line)
}
$null = $sb.AppendLine()

# Write file
$fullOutput = if ([System.IO.Path]::IsPathRooted($Output)) { $Output } else { Join-Path (Split-Path $PSScriptRoot -Parent) $Output }
$outDir = Split-Path $fullOutput -Parent
if (-not (Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir | Out-Null }
[IO.File]::WriteAllText($fullOutput, $sb.ToString(), [Text.UTF8Encoding]::new($false))

if ($Print) {
    $sb.ToString()
} else {
    Write-Host "Generated: $fullOutput" -ForegroundColor Green
}
